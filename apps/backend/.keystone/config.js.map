{
  "version": 3,
  "sources": ["../keystone.ts", "../modules/auth/index.ts", "../modules/admin/users/user.entity.ts", "../modules/admin/roles/role.entity.ts", "../modules/admin/permissions/permission.entity.ts", "../modules/profiles/parent/parent.entity.ts", "../modules/child/child.entity.ts", "../modules/tests/test/test.entity.ts", "../modules/tests/question/question.entity.ts", "../modules/admin/pages/page.entity.ts", "../modules/tests/test/testResult.entity.ts"],
  "sourcesContent": ["import dotenv from 'dotenv'\nimport { config } from '@keystone-6/core';\n\nimport { withAuth, session } from './modules/auth';\nimport { UserEntity } from './modules/admin/users/user.entity';\nimport { RoleEntity } from './modules/admin/roles/role.entity';\nimport { PermissionEntity } from './modules/admin/permissions/permission.entity';\nimport { ParentEntity } from './modules/profiles/parent/parent.entity';\nimport { ChildEntity } from './modules/child/child.entity';\nimport { TestEntity } from './modules/tests/test/test.entity';\nimport { QuestionEntity } from './modules/tests/question/question.entity';\nimport { PageEntity } from './modules/admin/pages/page.entity';\nimport { TestResultEntity } from './modules/tests/test/testResult.entity';\n\ndotenv.config({ path: './config/.env' });\n\nexport default withAuth(\n  config({\n    db: {\n      provider: 'postgresql',\n      url: 'postgres://postgres:postgres@localhost:5432/develop_neuro_control',\n      enableLogging: true,\n      idField: {\n        kind: 'uuid',\n      },\n      onConnect: async () => {\n        console.log('Connected to PostgreSQL')\n      }\n    },\n    lists: {\n      User: UserEntity,\n      Role: RoleEntity,\n      Permission: PermissionEntity,\n      Page: PageEntity,\n      Parent: ParentEntity,\n      Child: ChildEntity,\n      Test: TestEntity,\n      Question: QuestionEntity,\n      TestResult: TestResultEntity\n    },\n    session,\n  })\n);\n", "import { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\nimport { statelessSessions } from '@keystone-6/core/session';\n\nlet sessionSecret = process.env.SESSION_SECRET;\n\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n  initFirstItem: {\n    fields: ['username', 'email', 'password'],\n  },\n});\n\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret,\n});\n\nexport { withAuth, session };\n", "import { ListConfig, list } from '@keystone-6/core';\nimport { BaseListTypeInfo } from '@keystone-6/core/types';\nimport { password, relationship, text } from '@keystone-6/core/fields'\n\nexport const UserEntity: ListConfig<BaseListTypeInfo> = list({\n  fields: {\n    username: text(),\n    password: password(),\n    email: text({\n      isIndexed: 'unique'\n    }),\n    role: relationship({\n      ref: 'Role',\n      many: false\n    }),\n  },\n  access: {\n    operation: {\n      query: () => true,\n      create: () => true,\n      update: () => true,\n      delete: () => true\n    }\n  },\n})\n", "import { ListConfig, list } from '@keystone-6/core';\nimport { relationship, text } from '@keystone-6/core/fields';\nimport { BaseListTypeInfo } from '@keystone-6/core/types';\n\nexport const RoleEntity: ListConfig<BaseListTypeInfo> = list({\n  fields: {\n    name: text(),\n    sysname: text({\n      isIndexed: 'unique'\n    }),\n    pages: relationship({\n      ref: 'Page',\n      many: true\n    }),\n    permission: relationship({\n      ref: 'Permission',\n      many: true\n    })\n  },\n  access: {\n    operation: {\n      query: () => true,\n      create: () => true,\n      update: () => true,\n      delete: () => true\n    }\n  },\n})\n", "import { ListConfig, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\nimport { BaseListTypeInfo } from '@keystone-6/core/types';\n\nexport const PermissionEntity: ListConfig<BaseListTypeInfo> = list({\n  fields: {\n    name: text(),\n    sysname: text({\n      isIndexed: true\n    }),\n    description: text(),\n  },\n  access: {\n    operation: {\n      query: () => true,\n      create: () => true,\n      update: () => true,\n      delete: () => true\n    }\n  },\n})\n", "import { ListConfig, list } from '@keystone-6/core';\nimport { BaseListTypeInfo } from '@keystone-6/core/types';\nimport { relationship, text } from '@keystone-6/core/fields'\n\nexport const ParentEntity: ListConfig<BaseListTypeInfo> = list({\n  fields: {\n    user: relationship({\n      ref: 'User',\n      many: false,\n    }),\n    name: text(),\n    children: relationship({\n      ref: 'Child',\n      many: true,\n    }),\n    friends: relationship({\n      ref: 'Parent',\n      many: true,\n    })\n  },\n  access: {\n    operation: {\n      query: () => true,\n      create: () => true,\n      update: () => true,\n      delete: () => true\n    }\n  },\n})\n", "import { ListConfig, list } from '@keystone-6/core';\nimport { text, calendarDay, select, relationship } from '@keystone-6/core/fields';\nimport { BaseListTypeInfo } from '@keystone-6/core/types';\n\nexport const ChildEntity: ListConfig<BaseListTypeInfo> = list({\n  fields: {\n    name: text(),\n    dateOfBirth: calendarDay(),\n    gender: select({\n      type: 'enum',\n      options: [\n        { label: 'male', value: 'male' },\n        { label: 'female', value: 'female' },\n      ]\n    }),\n    medicalInfo: text(),\n    testsResults: relationship({\n      ref: 'TestResult',\n      many: true,\n    })\n  },\n  access: {\n    operation: {\n      query: () => true,\n      create: () => true,\n      update: () => true,\n      delete: () => true\n    }\n  },\n})\n", "import { ListConfig, list } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\nimport { BaseListTypeInfo } from '@keystone-6/core/types';\n\nexport const TestEntity: ListConfig<BaseListTypeInfo> = list({\n  fields: {\n    title: text(),\n    questions: relationship({\n      ref: 'Question',\n      many: true,\n    }),\n  },\n  access: {\n    operation: {\n      query: () => true,\n      create: () => true,\n      update: () => true,\n      delete: () => true\n    }\n  },\n})\n", "import { ListConfig, list } from '@keystone-6/core';\nimport { text, select, checkbox, json, integer } from '@keystone-6/core/fields';\nimport { BaseListTypeInfo } from '@keystone-6/core/types';\n\nexport const QuestionEntity: ListConfig<BaseListTypeInfo> = list({\n  fields: {\n    title: text(),\n    description: text(),\n    isRequired: checkbox(),\n    type: select({\n      type: 'enum',\n      options: [\n        { label: 'short', value: 'short' },\n        { label: 'multipleChoice', value: 'multipleChoice' }, // \u0412\u044B\u0431\u043E\u0440 \u043E\u0434\u043D\u043E\u0433\u043E \u0438\u0437 \u043C\u043D\u043E\u0436\u0435\u0441\u0442\u0432\u0430\n        { label: 'checkboxes', value: 'checkboxes' }\n      ],\n    }),\n    answer: json(),\n    points: integer(),\n  },\n  access: {\n    operation: {\n      query: () => true,\n      create: () => true,\n      update: () => true,\n      delete: () => true\n    }\n  },\n})\n", "import { ListConfig, list } from '@keystone-6/core';\nimport { checkbox, relationship, text } from '@keystone-6/core/fields';\nimport { BaseListTypeInfo } from '@keystone-6/core/types';\n\nexport const PageEntity: ListConfig<BaseListTypeInfo> = list({\n  fields: {\n    title: text(),\n    parent: relationship({\n      ref: 'Page',\n      many: false\n    }),\n    showInMenu: checkbox(),\n  },\n  access: {\n    operation: {\n      query: () => true,\n      create: () => true,\n      update: () => true,\n      delete: () => true\n    }\n  },\n})\n", "import { ListConfig, list } from '@keystone-6/core';\nimport { relationship, calendarDay, json } from '@keystone-6/core/fields';\nimport { BaseListTypeInfo } from '@keystone-6/core/types';\n\nexport const TestResultEntity: ListConfig<BaseListTypeInfo> = list({\n  fields: {\n    test: relationship({\n      ref: 'Test',\n      many: false\n    }),\n    child: relationship({\n      ref: 'Child',\n      many: false,\n    }),\n    date: calendarDay(),\n    result: json(),\n  },\n  access: {\n    operation: {\n      query: () => true,\n      create: () => true,\n      update: () => true,\n      delete: () => true\n    }\n  },\n})\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "import_fields", "import_core", "import_fields", "import_core", "import_fields", "import_core", "import_fields", "import_core", "import_fields", "import_core", "import_fields", "import_core", "import_fields", "import_core", "import_fields", "dotenv"]
}
